已知两颗二叉树，将它们合并成一颗二叉树。合并规则是：都存在的结点，就将结点值加起来，否则空的位置就由另一个树的结点来代替。例如：
两颗二叉树是 :
Tree 1
1
/ \
3   2
/
5

Tree 2
2
/ \
1   3
\   \
4   7

合并后的树为
3
/ \
4   5
/ \    \
5  4    7

输入描述:
第一行输入整数n，m。(分别表示树1和树2的节点数, 1 <= n，m <= 100)
接下来n行，第i行三个整数l, r, v, (0 <= l, r <= n, 0 <= v <= 100), 表示第一棵树的第i个结点的左儿子编号，右儿子编号和权值。
接下来m行，第i行三个整数l, r, v, (0 <= l, r <= n, 0 <= v <= 100), 表示第二棵树的第i个结点的左儿子编号，右儿子编号和权值。
（对于左右儿子，如果编号为0表示空。保证如果儿子不为空，则儿子编号大于父亲编号。）

输出描述 :
输出合并后树按层遍历的各结点权值，相邻权值之间以一个空格相间。

输入例子1 :
4 5
2 3 1
4 0 3
0 0 2
0 0 5
2 3 2
0 4 1
0 5 3
0 0 4
0 0 7

输出例子1:
3 4 5 5 4 7

例子说明1 :
	见题目描述